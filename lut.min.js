var LUT = {
    downloadInIFrame: function(e) {
        var t = document.createElement("iframe");
        t.style.display = "none", t.src = e, document.body.appendChild(t)
    },
    windowOpenEnabled: !0,
    windowOpen: function(e) {
        LUT.windowOpenEnabled ? (LUT.windowOpenEnabled = !1, window.open(e)) : console.log("LUT.windowOpenEnabled == false", e)
    }
};
document.addEventListener("DOMContentLoaded", function() {
    let e = function() {
        LUT.windowOpenEnabled = !0, console.log("enabler")
    };
    console.log("DOMContentLoaded"), document.body.addEventListener("click", e), document.body.addEventListener("dblclick", e)
}), LUT.fixBackButton = function(e) {
    var t;
    try {
        for (t = 0; t < 3; t++) console.log("pushState", t), history.pushState({}, document.title, window.location.toString())
    } catch (e) {
        console.error(e)
    }
    try {
        window.onpopstate = function(t) {
            console.log("onpopstate: ", document.location, ", state: ", t.state);
            try {
                history.pushState({}, document.title, window.location.href), console.log("pushed from popstate")
            } catch (e) {
                console.error(e)
            }
            e()
        }, console.log("onpopstate was set")
    } catch (e) {
        console.error(e)
    }
}, LUT.openFullscreen = function() {
    try {
        var e = document.body;
        e.requestFullscreen ? e.requestFullscreen() : e.webkitRequestFullscreen ? e.webkitRequestFullscreen() : e.msRequestFullscreen && e.msRequestFullscreen()
    } catch (e) {
        console.error(e)
    }
}, LUT.setCookie = function(e, t, o) {
    (o = o || {}).path = "/", o.expires instanceof Date && (o.expires = o.expires.toUTCString());
    let n = encodeURIComponent(e) + "=" + encodeURIComponent(t);
    for (var r in o) {
        if (!o.hasOwnProperty(r)) continue;
        n += "; " + r;
        let e = o[r];
        !0 !== e && (n += "=" + e)
    }
    document.cookie = n
}, LUT.getCookie = function(e) {
    let t = document.cookie.match(new RegExp("(?:^|; )" + e.replace(/([.$?*|{}()\[\]\\\/+^])/g, "\\$1") + "=([^;]*)"));
    return t ? decodeURIComponent(t[1]) : void 0
}, LUT.deleteCookie = function(e) {
    LUT.setCookie(e, "", {
        "max-age": -1
    })
}, LUT.incCookieCounter = function(e) {
    var t = LUT.getCookie(e) || 0;
    return t *= 1, t += 1, LUT.setCookie(e, t), t
}, LUT.getCookieCounter = function(e) {
    var t = LUT.getCookie(e) || 0;
    return t *= 1
}, LUT.showElement = function(e) {
    document.getElementById(e).style.display = "block"
}, LUT.hideElement = function(e) {
    document.getElementById(e).style.display = "none"
}, LUT.isObject = function(e) {
    return "object" == typeof e && null !== e
}, LUT.uuidv4 = function() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e) {
        var t = 16 * Math.random() | 0;
        return ("x" == e ? t : 3 & t | 8).toString(16)
    })
}, LUT.randomFromArray = function(e) {
    return e[Math.floor(Math.random() * e.length)]
}, LUT.initId = function(e) {
    var t = LUT.getCookie(e);
    return t || (t = LUT.uuidv4(), LUT.setCookie(e, t)), t
}, LUT.postStatParams = {}, LUT.setPostStatParams = function(e) {
    LUT.postStatParams = e
}, LUT.postStatURL = "/skip/stat.txt", LUT.setStatURL = function(e) {
    LUT.postStatURL = e
}, LUT.postStat = function(e, t) {
    var o, n = new XMLHttpRequest,
        r = (new Date).getTime(),
        s = "event_type=" + encodeURIComponent(e);
    for (o in s += "&ms=" + r, LUT.postStatParams) LUT.postStatParams.hasOwnProperty(o) && (s += "&" + o + "=" + encodeURIComponent(LUT.postStatParams[o]));
    if (t)
        if (LUT.isObject(t))
            for (o in t) t.hasOwnProperty(o) && ("boolean" == typeof t[o] && (t[o] = t[o] ? 1 : 0), s += "&" + o + "=" + encodeURIComponent(t[o]));
        else s += "&" + t;
    n.open("GET", LUT.postStatURL + "?" + s, !0), n.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), n.send()
}, LUT.parse_query_string = function(e) {
    for (var t = e.split("&"), o = {}, n = 0; n < t.length; n++) {
        var r = t[n].split("="),
            s = decodeURIComponent(r[0]),
            i = decodeURIComponent(r[1]);
        if (void 0 === o[s]) o[s] = decodeURIComponent(i);
        else if ("string" == typeof o[s]) {
            var a = [o[s], decodeURIComponent(i)];
            o[s] = a
        } else o[s].push(decodeURIComponent(i))
    }
    return o
}, LUT.$_GET = LUT.parse_query_string(location.search.toString().substr(1));